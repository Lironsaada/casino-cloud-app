apiVersion: v1
kind: Secret
metadata:
  name: jenkins-secrets
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  dockerhub-username: {{ .Values.secrets.dockerhubUsername | b64enc | quote }}
  dockerhub-password: {{ .Values.secrets.dockerhubPassword | b64enc | quote }}
  git-username: {{ .Values.secrets.gitUsername | b64enc | quote }}
  git-token: {{ .Values.secrets.gitToken | b64enc | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-casc-config
  namespace: {{ .Release.Namespace }}
data:
  jenkins.yaml: |
    jenkins:
      systemMessage: "üé∞ Casino App Jenkins - Automated CI/CD Pipeline"
      numExecutors: 2
      quietPeriod: 0
      
      updateCenter:
        sites:
        - id: "default"
          url: "https://updates.jenkins.io/update-center.json"
      
      securityRealm:
        local:
          allowsSignup: false
          users:
          - id: "{{ .Values.jenkins.adminUser }}"
            password: "{{ .Values.jenkins.adminPassword }}"
      
      authorizationStrategy:
        globalMatrix:
          permissions:
          - "Overall/Administer:{{ .Values.jenkins.adminUser }}"
          - "Overall/Read:authenticated"
          - "Job/Build:authenticated"
          - "Job/Read:authenticated"
    
    credentials:
      system:
        domainCredentials:
        - credentials:
          - usernamePassword:
              scope: GLOBAL
              id: "dockerhub-creds"
              username: "{{ .Values.secrets.dockerhubUsername }}"
              password: "{{ .Values.secrets.dockerhubPassword }}"
              description: "Docker Hub credentials"
          - usernamePassword:
              scope: GLOBAL
              id: "git-creds"
              username: "{{ .Values.secrets.gitUsername }}"
              password: "{{ .Values.secrets.gitToken }}"
              description: "Git credentials"
    
    unclassified:
      location:
        url: "http://jenkins.casino-app.local"
        adminAddress: "admin@casino-app.com"
    
    jobs:
      - script: >
          pipelineJob('PIPE-01-Casino-App-CICD') {
            displayName('üé∞ PIPE-01: Casino App CI/CD')
            description('Main CI/CD pipeline - builds, tests, and deploys casino application')
            definition {
              cps {
                script('''
                  pipeline {
                    agent any
                    
                    parameters {
                      choice(
                        name: 'DEPLOY_ENV',
                        choices: ['', 'dev', 'staging', 'prod'],
                        description: 'Environment to deploy to'
                      )
                    }
                    
                    stages {
                      stage('Checkout') {
                        steps {
                          echo 'üì• Checking out casino app source code'
                          // git branch: 'main', url: 'https://github.com/your-username/casino-cloud-app.git'
                        }
                      }
                      
                      stage('Lint & Test') {
                        parallel {
                          stage('Lint') {
                            steps {
                              echo 'üßπ Running linting checks'
                              // sh 'make lint'
                            }
                          }
                          stage('Test') {
                            steps {
                              echo 'üß™ Running tests'
                              // sh 'make test'
                            }
                          }
                        }
                      }
                      
                      stage('Build') {
                        steps {
                          echo 'üèóÔ∏è Building Docker image'
                          // sh 'make image'
                        }
                      }
                      
                      stage('Push Image') {
                        when {
                          branch 'main'
                        }
                        steps {
                          echo 'üì§ Pushing Docker image'
                          // sh 'make push'
                        }
                      }
                      
                      stage('Deploy') {
                        when {
                          expression { params.DEPLOY_ENV != '' }
                        }
                        steps {
                          script {
                            if (params.DEPLOY_ENV == 'prod') {
                              input message: 'Deploy to production?', ok: 'Deploy'
                            }
                            echo "üöÄ Deploying to ${params.DEPLOY_ENV}"
                            // sh "kubectl apply -f k8s/ --namespace=casino-${params.DEPLOY_ENV}"
                          }
                        }
                      }
                    }
                    
                    post {
                      always {
                        echo 'üìä Pipeline completed!'
                      }
                    }
                  }
                ''')
                sandbox(true)
              }
            }
          }
          
          pipelineJob('PIPE-02-Deploy-Pipeline') {
            displayName('üöÄ PIPE-02: Deployment Pipeline')
            description('Deploy casino app to different environments')
            parameters {
              choiceParam('ENVIRONMENT', ['dev', 'staging', 'prod'], 'Target environment')
              stringParam('IMAGE_TAG', 'latest', 'Docker image tag to deploy')
            }
            definition {
              cps {
                script('''
                  pipeline {
                    agent any
                    
                    stages {
                      stage('Validate') {
                        steps {
                          echo "üîç Validating deployment to ${params.ENVIRONMENT}"
                          script {
                            if (params.ENVIRONMENT == 'prod') {
                              input message: 'Deploy to PRODUCTION?', ok: 'Deploy'
                            }
                          }
                        }
                      }
                      
                      stage('Deploy') {
                        steps {
                          echo "üöÄ Deploying to ${params.ENVIRONMENT}"
                          echo "Using image tag: ${params.IMAGE_TAG}"
                          // sh "helm upgrade casino-app helm/app --namespace=casino-${params.ENVIRONMENT} --set image.tag=${params.IMAGE_TAG}"
                        }
                      }
                      
                      stage('Verify') {
                        steps {
                          echo "‚úÖ Verifying deployment"
                          // sh "kubectl get pods -n casino-${params.ENVIRONMENT}"
                        }
                      }
                    }
                    
                    post {
                      success {
                        echo "üéâ Deployment to ${params.ENVIRONMENT} successful!"
                      }
                      failure {
                        echo "‚ùå Deployment failed!"
                      }
                    }
                  }
                ''')
                sandbox(true)
              }
            }
          }
          
          pipelineJob('PIPE-03-Release-Pipeline') {
            displayName('üî• PIPE-03: Release Pipeline')
            description('Build and release casino app with versioning')
            parameters {
              choiceParam('RELEASE_TYPE', ['patch', 'minor', 'major'], 'Type of release')
              booleanParam('DEPLOY_TO_PROD', false, 'Deploy to production after release')
            }
            definition {
              cps {
                script('''
                  pipeline {
                    agent any
                    
                    stages {
                      stage('Version Bump') {
                        steps {
                          echo "üî¢ Bumping version (${params.RELEASE_TYPE})"
                          script {
                            env.NEW_VERSION = "1.0.${BUILD_NUMBER}"
                            echo "New version: ${env.NEW_VERSION}"
                          }
                        }
                      }
                      
                      stage('Build & Test') {
                        parallel {
                          stage('Test') {
                            steps {
                              echo "üß™ Running comprehensive tests"
                              // sh 'make test-all'
                            }
                          }
                          stage('Build') {
                            steps {
                              echo "üèóÔ∏è Building release image"
                              // sh "docker build -t casino-app:${env.NEW_VERSION} ."
                            }
                          }
                        }
                      }
                      
                      stage('Security Scan') {
                        steps {
                          echo "üîí Running security scans"
                          // sh 'make security-scan'
                        }
                      }
                      
                      stage('Release') {
                        steps {
                          echo "üì¶ Creating release ${env.NEW_VERSION}"
                          // sh "docker push casino-app:${env.NEW_VERSION}"
                          // sh "git tag v${env.NEW_VERSION}"
                        }
                      }
                      
                      stage('Deploy to Prod') {
                        when {
                          expression { params.DEPLOY_TO_PROD }
                        }
                        steps {
                          echo "üî• Deploying to production"
                          input message: "Deploy ${env.NEW_VERSION} to PRODUCTION?", ok: 'Deploy'
                          build job: 'PIPE-02-Deploy-Pipeline', parameters: [
                            string(name: 'ENVIRONMENT', value: 'prod'),
                            string(name: 'IMAGE_TAG', value: env.NEW_VERSION)
                          ]
                        }
                      }
                    }
                    
                    post {
                      success {
                        echo "üéâ Release ${env.NEW_VERSION} completed!"
                      }
                    }
                  }
                ''')
                sandbox(true)
              }
            }
          }